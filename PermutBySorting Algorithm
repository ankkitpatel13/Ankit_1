public class PermutebySorting {
    
     public static void main(String[] args) {  
         
     int[] numbers = { 1, 2, 3, 4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 };
     
       for(int i=0;i<numbers.length;i++){
           
           System.out.print(numbers[i]+", ");
       }
       
       System.out.println();
       
       permuteBySorting(numbers);
       
     } 
      public static void permuteBySorting(int[] numbers){
          
          int[] priorities = {21,34,55,44,65,77,63,76,61,24,54,12,13,87,34,16,98,55,34,50};
          
               final int A = numbers.length;
               
        List<prioritized<Integer>> list = 
                
            new ArrayList<>(A);
        
        for (int i = 0; i < A; i++) {
            
    list.add(new prioritized<>(numbers[i], priorities[i]));
} 
        Collections.sort(list);         

        int[] permuted = new int[A];         

        for (int i = 0; i < A; i++) {             
    
        permuted[i] = list.get(i).value;         }         

        System.out.println(Arrays.toString(permuted));     } } 

        class prioritized<T> implements Comparable<prioritized<T>> {
            
            final T value;
            
            final int priority;
            
            prioritized(T value, int priority) {
                
            this.value = value;
            
            this.priority = priority;     
} 
@Override
         public int compareTo(prioritized other) {
             
         return Integer.valueOf(this.priority).compareTo(other.priority);
 } 

}
    
